#!/usr/bin/env ruby
# Encryption routines for game server/client use

require 'openssl'
#require 'rbnacl'

def enc_key
  [ 0x07,0x34,0x84,0x34,0xB2,0xAD,0xEA,0x0F,0x75,0xBD,0x2F,0x3A,0xFA,0x0D,0xB5,0xAE,
    0xFE,0x79,0xDB,0x48,0xB0,0x6F,0xF9,0x78,0x26,0x0C,0xD0,0xB1,0x95,0xD1,0x96,0xE7].pack('c*')
end

def enc_iv
  [0x12,0x7F,0x82,0xB0,0x04,0xF1,0x3E,0xC2,0x71,0x2F,0x98,0xBE,0xB5,0xA2,0x4B,0x99].pack('c*')
end

def enc_nonce
  [ 0xB6,0x70,0xF3,0xC9,0x4B,0x85,0x4D,0x71,0x51,0x80,0xA5,0xCA,0xDA,0xE4,0x61,0xF4,
    0xC9,0x38,0x62,0xF4,0x1C,0x28,0x44,0x95].pack('c*')
end

def join_bytes data
  data.bytes.map { |b| sprintf('0x%02X,',b) }.join
end

def encrypt_aes_256_cbc data
  c = OpenSSL::Cipher.new('aes-256-cbc')
  c.encrypt; c.key = enc_key; c.iv = enc_iv
  c.update(data) << c.final
end

def encrypt_rc4 data
  c = OpenSSL::Cipher.new('rc4')
  c.encrypt
  c.key = enc_iv
  c.update(data) << c.final
end

def encrypt_chacha20 data
  secret_box = RbNaCl::SecretBox.new(enc_key)
  secret_box.encrypt(enc_nonce, data)
end

def encrypt data
  encrypt_aes_256_cbc data
end

# test
# puts "enc_key is #{join_bytes(enc_key)}"
# puts "enc_iv is #{join_bytes(enc_iv)}"
# puts "enc_nonce is #{join_bytes(enc_nonce)}"
# encrypt_chacha20('zbc')