
local fix16 = require 'lboot/ext/fix16'
local vector = require 'lboot/ext/vector16'

local a = vector.create(1, 2)
local b = a:clone()
local x, y = b:unpack()

logd("isvector %s %s", tostring(vector.isvector(a)), tostring(vector.isvector(b)))
logd("a=%s", tostring(a))
logd("-a=%s", tostring(-a))
logd("x=%s, y=%s", tostring(x), tostring(y))
logd("a+b=%s", tostring(a + b))
logd("a-b=%s", tostring(a - b))
logd("a*b=%s", tostring(a * b))
logd("a*2=%s", tostring(a * 2))
logd("a/2=%s", tostring(a / 2))
logd("b*a=%s", tostring(b * a))
logd("2*a=%s", tostring(2 * a))
logd("a=b %s", tostring(a == b))
logd("a<b %s", tostring(a < b))
logd("a<=b %s", tostring(a <= b))
logd("permul(a, b)=%s", tostring(a:permul(b)))
logd("a len2=%s", tostring(a:len2()))
logd("a len=%s", tostring(a:len()))
logd("dist(a, b)=%s", tostring(a:dist(b)))
logd("a normalized=%s", tostring(a:normalized()))
logd("a rotated=%s", tostring(a:rotated(fix16.pi_div_4)))
logd("a perpendicular=%s", tostring(a:perpendicular()))
logd("a projectOn b=%s", tostring(a:projectOn(b)))
logd("a mirrorOn b=%s", tostring(a:mirrorOn(b)))
logd("a cross b=%s", tostring(a:cross(b)))
logd("a angleTo b=%s", tostring(a:angleTo(b)))
logd("a trimmed b=%s", tostring(a:trimmed(fix16(0.5))))
logd("a trimmed b=%s", tostring(a:trimmed(0.5)))